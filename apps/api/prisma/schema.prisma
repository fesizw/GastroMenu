// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  logo           String?
  address        String?
  mail           String?
  phone          String?
  socials        String[]
  carouselPhotos String[]
  description    String?
  active         Boolean       @default(true)
  users          User[]
  categories     Category[]
  subcategories  Subcategory[]
  products       Product[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  username     String     @unique
  password     String
  photo        String?
  active       Boolean    @default(true)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId
  logs         Log[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  color         String
  image         String?
  order         Int           @default(0)
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId  String        @db.ObjectId
  products      Product[]
  subcategories Subcategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  order        Int        @default(0)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   String     @db.ObjectId
  products     Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  value         Float
  description   String?
  image         String?
  order         Int         @default(0)
  active        Boolean     @default(true)
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId  String      @db.ObjectId
  category      Category    @relation(fields: [categoryId], references: [id])
  categoryId    String      @db.ObjectId
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum ActionType {
  create
  update
  delete
}

model Log {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  action           ActionType
  targetCollection String
  targetId         String
  timestamp        DateTime   @default(now())
  details          Json
  user             User       @relation(fields: [userId], references: [id])
  userId           String     @db.ObjectId
  createdAt        DateTime   @default(now())
}
